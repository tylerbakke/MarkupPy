name: Build and Publish

on:
  # Allow manual trigger
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.18)'
        required: true
        type: string
      create_tag:
        description: 'Create git tag'
        required: true
        default: true
        type: boolean
  # Trigger on pushes to main and master branches, and on tag creation
  push:
    branches:
      - main
      - master
    tags:
      - 'v*'

# Permissions needed for pushing tags and packages
permissions:
  contents: write
  id-token: write # For PyPI trusted publishing

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install build twine
      
      - name: Get version from tag
        id: get_version
        run: |
          if [[ ${{ github.ref }} == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION=$(grep -o "__version__ = '[0-9.]*'" MarkupPy/markup.py | cut -d "'" -f 2)
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Verify version matches
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          # Check version in markup.py
          MARKUP_VERSION=$(grep -o "__version__ = '[0-9.]*'" MarkupPy/markup.py | cut -d "'" -f 2)
          # Check version in pyproject.toml
          PYPROJECT_VERSION=$(grep -o 'version = "[0-9.]*"' pyproject.toml | cut -d '"' -f 2)
          
          echo "markup.py version: $MARKUP_VERSION"
          echo "pyproject.toml version: $PYPROJECT_VERSION"
          echo "Expected version: $VERSION"
          
          if [ "$MARKUP_VERSION" != "$VERSION" ] || [ "$PYPROJECT_VERSION" != "$VERSION" ]; then
            echo "::error::Version mismatch! Please ensure MarkupPy/markup.py and pyproject.toml both have version $VERSION"
            exit 1
          fi
      
      - name: Build package
        run: python -m build
      
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1 